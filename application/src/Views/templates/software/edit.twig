{% extends "base.twig" %}

{% block page_actions %}
    <div class="btn-toolbar">
        <a href="/software/{{ software.id }}" class="btn btn-outline-secondary me-2">
            <i class="fas fa-arrow-left me-1"></i>Back to Software
        </a>
        <a href="/software" class="btn btn-outline-secondary">
            <i class="fas fa-list me-1"></i>All Software
        </a>
    </div>
{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-10 col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-laptop-code me-2"></i>Edit Software - {{ software.software_name }}
                </h5>
            </div>
            <div class="card-body">
                {% if errors %}
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Please correct the following errors:</strong>
                        <ul class="mb-0 mt-2">
                            {% for error in errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                {% endif %}

                <form method="POST" action="/software/{{ software.id }}/edit">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="software_name" class="form-label">
                                    Software Name <span class="text-danger">*</span>
                                </label>
                                <input 
                                    type="text" 
                                    class="form-control" 
                                    id="software_name" 
                                    name="software_name" 
                                    value="{{ form_data.software_name|default(software.software_name) }}"
                                    required
                                    maxlength="255"
                                    placeholder="e.g. Adobe Photoshop, Microsoft Office"
                                    list="software_names_list"
                                    autocomplete="off"
                                >
                                <datalist id="software_names_list">
                                </datalist>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="version" class="form-label">Version</label>
                                <input 
                                    type="text" 
                                    class="form-control" 
                                    id="version" 
                                    name="version" 
                                    value="{{ form_data.version|default(software.version) }}"
                                    maxlength="50"
                                    placeholder="e.g. 2024, v1.5.2"
                                    list="version_list"
                                    autocomplete="off"
                                >
                                <datalist id="version_list">
                                </datalist>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea 
                            class="form-control" 
                            id="description" 
                            name="description" 
                            rows="3"
                            maxlength="1000"
                            placeholder="Brief description of the software and its purpose"
                        >{{ form_data.description|default(software.description) }}</textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Vendor Management</label>
                                <div class="form-check">
                                    <input 
                                        class="form-check-input" 
                                        type="radio" 
                                        name="vendor_managed" 
                                        id="vendor_managed_no" 
                                        value="0"
                                        {% set vendor_managed_value = form_data.vendor_managed|default(software.vendor_managed) %}
                                        {% if vendor_managed_value == '0' or vendor_managed_value == 0 or vendor_managed_value is empty %}checked{% endif %}
                                    >
                                    <label class="form-check-label" for="vendor_managed_no">
                                        <i class="fas fa-users me-1"></i>Self Managed
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input 
                                        class="form-check-input" 
                                        type="radio" 
                                        name="vendor_managed" 
                                        id="vendor_managed_yes" 
                                        value="1"
                                        {% if vendor_managed_value == '1' or vendor_managed_value == 1 %}checked{% endif %}
                                    >
                                    <label class="form-check-label" for="vendor_managed_yes">
                                        <i class="fas fa-building me-1"></i>Vendor Managed
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="vendor_name" class="form-label">Vendor Name</label>
                                <input 
                                    type="text" 
                                    class="form-control" 
                                    id="vendor_name" 
                                    name="vendor_name" 
                                    value="{{ form_data.vendor_name|default(software.vendor_name) }}"
                                    maxlength="255"
                                    placeholder="e.g. Microsoft, Adobe, Oracle"
                                    list="vendor_list"
                                    autocomplete="off"
                                >
                                <datalist id="vendor_list">
                                </datalist>
                                <div class="form-text">Only required if vendor managed</div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="license_type" class="form-label">License Type</label>
                        <select class="form-control" id="license_type" name="license_type">
                            <option value="">Select license type...</option>
                            {% set current_license = form_data.license_type|default(software.license_type) %}
                            <option value="Commercial" {% if current_license == 'Commercial' %}selected{% endif %}>Commercial</option>
                            <option value="Open Source" {% if current_license == 'Open Source' %}selected{% endif %}>Open Source</option>
                            <option value="Freeware" {% if current_license == 'Freeware' %}selected{% endif %}>Freeware</option>
                            <option value="Subscription" {% if current_license == 'Subscription' %}selected{% endif %}>Subscription</option>
                            <option value="Site License" {% if current_license == 'Site License' %}selected{% endif %}>Site License</option>
                            <option value="Other" {% if current_license == 'Other' %}selected{% endif %}>Other</option>
                        </select>
                    </div>

                    <div class="card bg-light mb-4">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-users me-2"></i>Role Assignments
                                <span class="text-danger">*</span>
                            </h6>
                            <small class="text-muted">All three roles are required. The software's university unit will be automatically determined by the business owner's university unit.</small>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="business_owner_name" class="form-label">
                                            <i class="fas fa-briefcase me-1"></i>Business Owner <span class="text-danger">*</span>
                                        </label>
                                        <input 
                                            type="text" 
                                            class="form-control employee-autocomplete" 
                                            id="business_owner_name" 
                                            name="business_owner_name"
                                            value="{{ form_data.business_owner_name|default(business_owner_name) }}"
                                            placeholder="Type to search for employee..."
                                            list="business_owner_list"
                                            autocomplete="off"
                                            required
                                        >
                                        <input 
                                            type="hidden" 
                                            id="business_owner_id" 
                                            name="business_owner_id" 
                                            value="{{ form_data.business_owner_id|default(software.business_owner_id) }}"
                                        >
                                        <datalist id="business_owner_list">
                                        </datalist>
                                        <div class="form-text">Determines the software's university unit</div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="technical_owner_name" class="form-label">
                                            <i class="fas fa-cog me-1"></i>Technical Owner <span class="text-danger">*</span>
                                        </label>
                                        <input 
                                            type="text" 
                                            class="form-control employee-autocomplete" 
                                            id="technical_owner_name" 
                                            name="technical_owner_name"
                                            value="{{ form_data.technical_owner_name|default(technical_owner_name) }}"
                                            placeholder="Type to search for employee..."
                                            list="technical_owner_list"
                                            autocomplete="off"
                                            required
                                        >
                                        <input 
                                            type="hidden" 
                                            id="technical_owner_id" 
                                            name="technical_owner_id" 
                                            value="{{ form_data.technical_owner_id|default(software.technical_owner_id) }}"
                                        >
                                        <datalist id="technical_owner_list">
                                        </datalist>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="technical_manager_name" class="form-label">
                                            <i class="fas fa-users-cog me-1"></i>Technical Manager <span class="text-danger">*</span>
                                        </label>
                                        <input 
                                            type="text" 
                                            class="form-control employee-autocomplete" 
                                            id="technical_manager_name" 
                                            name="technical_manager_name"
                                            value="{{ form_data.technical_manager_name|default(technical_manager_name) }}"
                                            placeholder="Type to search for employee..."
                                            list="technical_manager_list"
                                            autocomplete="off"
                                            required
                                        >
                                        <input 
                                            type="hidden" 
                                            id="technical_manager_id" 
                                            name="technical_manager_id" 
                                            value="{{ form_data.technical_manager_id|default(software.technical_manager_id) }}"
                                        >
                                        <datalist id="technical_manager_list">
                                        </datalist>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid d-md-flex gap-2">
                        <button type="submit" class="btn btn-warning">
                            <i class="fas fa-save me-1"></i>Update Software
                        </button>
                        <a href="/software/{{ software.id }}" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Cancel
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
$(document).ready(function() {
    // Focus on software name field
    $('#software_name').focus();
    
    // Software name autocomplete functionality
    let autoCompleteTimeout;
    
    function loadAutocompleteSuggestions(query) {
        // Clear previous timeout
        if (autoCompleteTimeout) {
            clearTimeout(autoCompleteTimeout);
        }
        
        // Debounce the API call by 300ms
        autoCompleteTimeout = setTimeout(function() {
            $.ajax({
                url: '/software/autocomplete',
                method: 'GET',
                data: { q: query || '' },
                dataType: 'json',
                success: function(data) {
                    const datalist = $('#software_names_list');
                    datalist.empty(); // Clear existing options
                    
                    if (data.suggestions && data.suggestions.length > 0) {
                        data.suggestions.forEach(function(suggestion) {
                            datalist.append('<option value="' + suggestion + '">');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching autocomplete suggestions:', error);
                }
            });
        }, 300);
    }
    
    $('#software_name').on('input', function() {
        const query = $(this).val().trim();
        loadAutocompleteSuggestions(query);
    });
    
    // Load all suggestions when field is focused
    $('#software_name').on('focus', function() {
        const query = $(this).val().trim();
        loadAutocompleteSuggestions(query);
    });
    
    // Version autocomplete functionality
    let versionTimeout;
    
    function loadVersionSuggestions(query) {
        if (versionTimeout) {
            clearTimeout(versionTimeout);
        }
        
        versionTimeout = setTimeout(function() {
            $.ajax({
                url: '/software/autocomplete/version',
                method: 'GET',
                data: { q: query || '' },
                dataType: 'json',
                success: function(data) {
                    const datalist = $('#version_list');
                    datalist.empty();
                    
                    if (data.suggestions && data.suggestions.length > 0) {
                        data.suggestions.forEach(function(suggestion) {
                            datalist.append('<option value="' + suggestion + '">');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching version suggestions:', error);
                }
            });
        }, 300);
    }
    
    $('#version').on('input', function() {
        const query = $(this).val().trim();
        loadVersionSuggestions(query);
    });
    
    $('#version').on('focus', function() {
        const query = $(this).val().trim();
        loadVersionSuggestions(query);
    });
    
    // Vendor autocomplete functionality
    let vendorTimeout;
    
    function loadVendorSuggestions(query) {
        if (vendorTimeout) {
            clearTimeout(vendorTimeout);
        }
        
        vendorTimeout = setTimeout(function() {
            $.ajax({
                url: '/software/autocomplete/vendor',
                method: 'GET',
                data: { q: query || '' },
                dataType: 'json',
                success: function(data) {
                    const datalist = $('#vendor_list');
                    datalist.empty();
                    
                    if (data.suggestions && data.suggestions.length > 0) {
                        data.suggestions.forEach(function(suggestion) {
                            datalist.append('<option value="' + suggestion + '">');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching vendor suggestions:', error);
                }
            });
        }, 300);
    }
    
    $('#vendor_name').on('input', function() {
        const query = $(this).val().trim();
        loadVendorSuggestions(query);
    });
    
    $('#vendor_name').on('focus', function() {
        const query = $(this).val().trim();
        loadVendorSuggestions(query);
    });
    
    // Employee autocomplete functionality
    let employeeTimeouts = {};
    let employeeValidValues = {};
    
    function loadEmployeeSuggestions(query, targetListId, fieldName) {
        // Clear previous timeout for this field
        if (employeeTimeouts[fieldName]) {
            clearTimeout(employeeTimeouts[fieldName]);
        }
        
        // Debounce the API call by 300ms
        employeeTimeouts[fieldName] = setTimeout(function() {
            $.ajax({
                url: '/software/autocomplete/employee',
                method: 'GET',
                data: { q: query || '' },
                dataType: 'json',
                success: function(data) {
                    const datalist = $(targetListId);
                    datalist.empty();
                    
                    // Store valid values for this field
                    employeeValidValues[fieldName] = {};
                    
                    if (data.suggestions && data.suggestions.length > 0) {
                        data.suggestions.forEach(function(employee) {
                            const optionText = employee.full_name + 
                                (employee.job_title ? ' (' + employee.job_title + ')' : '') +
                                (employee.unit_name ? ' - ' + employee.unit_name : '');
                            datalist.append('<option value="' + employee.full_name + '" data-id="' + employee.id + '">');
                            
                            // Store this as a valid value
                            employeeValidValues[fieldName][employee.full_name] = employee.id;
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching employee suggestions for ' + fieldName + ':', error);
                }
            });
        }, 300);
    }
    
    // Setup autocomplete for business owner
    $('#business_owner_name').on('input', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#business_owner_list', 'business_owner');
        
        // Clear the hidden ID field if the user is typing
        if (query !== $(this).data('lastValidValue')) {
            $('#business_owner_id').val('');
        }
    });
    
    $('#business_owner_name').on('focus', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#business_owner_list', 'business_owner');
    });
    
    $('#business_owner_name').on('blur', function() {
        const enteredValue = $(this).val().trim();
        const validValues = employeeValidValues['business_owner'] || {};
        
        if (enteredValue && validValues[enteredValue]) {
            $('#business_owner_id').val(validValues[enteredValue]);
            $(this).data('lastValidValue', enteredValue);
        } else if (enteredValue) {
            // Invalid value entered
            $('#business_owner_id').val('');
            $(this).data('lastValidValue', '');
        }
    });
    
    // Setup autocomplete for technical owner
    $('#technical_owner_name').on('input', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#technical_owner_list', 'technical_owner');
        
        if (query !== $(this).data('lastValidValue')) {
            $('#technical_owner_id').val('');
        }
    });
    
    $('#technical_owner_name').on('focus', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#technical_owner_list', 'technical_owner');
    });
    
    $('#technical_owner_name').on('blur', function() {
        const enteredValue = $(this).val().trim();
        const validValues = employeeValidValues['technical_owner'] || {};
        
        if (enteredValue && validValues[enteredValue]) {
            $('#technical_owner_id').val(validValues[enteredValue]);
            $(this).data('lastValidValue', enteredValue);
        } else if (enteredValue) {
            $('#technical_owner_id').val('');
            $(this).data('lastValidValue', '');
        }
    });
    
    // Setup autocomplete for technical manager
    $('#technical_manager_name').on('input', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#technical_manager_list', 'technical_manager');
        
        if (query !== $(this).data('lastValidValue')) {
            $('#technical_manager_id').val('');
        }
    });
    
    $('#technical_manager_name').on('focus', function() {
        const query = $(this).val().trim();
        loadEmployeeSuggestions(query, '#technical_manager_list', 'technical_manager');
    });
    
    $('#technical_manager_name').on('blur', function() {
        const enteredValue = $(this).val().trim();
        const validValues = employeeValidValues['technical_manager'] || {};
        
        if (enteredValue && validValues[enteredValue]) {
            $('#technical_manager_id').val(validValues[enteredValue]);
            $(this).data('lastValidValue', enteredValue);
        } else if (enteredValue) {
            $('#technical_manager_id').val('');
            $(this).data('lastValidValue', '');
        }
    });
    
    // Initialize last valid values for existing data
    $('#business_owner_name').data('lastValidValue', $('#business_owner_name').val());
    $('#technical_owner_name').data('lastValidValue', $('#technical_owner_name').val());
    $('#technical_manager_name').data('lastValidValue', $('#technical_manager_name').val());
    
    // Toggle vendor name field based on vendor managed selection
    function toggleVendorField() {
        const isVendorManaged = $('#vendor_managed_yes').is(':checked');
        const vendorField = $('#vendor_name');
        
        if (isVendorManaged) {
            vendorField.prop('required', true);
            vendorField.closest('.mb-3').find('.form-text').text('Required for vendor managed software');
        } else {
            vendorField.prop('required', false);
            vendorField.val(''); // Clear vendor name when self managed is selected
            vendorField.closest('.mb-3').find('.form-text').text('Only required if vendor managed');
        }
    }
    
    // Initialize and bind vendor management toggle
    toggleVendorField();
    $('input[name="vendor_managed"]').change(toggleVendorField);
    
    // Form validation
    $('form').on('submit', function(e) {
        const softwareName = $('#software_name').val().trim();
        const isVendorManaged = $('#vendor_managed_yes').is(':checked');
        const vendorName = $('#vendor_name').val().trim();
        const businessOwner = $('#business_owner_id').val();
        const technicalOwner = $('#technical_owner_id').val();
        const technicalManager = $('#technical_manager_id').val();
        
        if (!softwareName) {
            e.preventDefault();
            alert('Please enter a software name.');
            $('#software_name').focus();
            return false;
        }
        
        if (isVendorManaged && !vendorName) {
            e.preventDefault();
            alert('Please enter a vendor name for vendor managed software.');
            $('#vendor_name').focus();
            return false;
        }
        
        // Validate role assignments - check both name and ID
        const businessOwnerName = $('#business_owner_name').val().trim();
        const technicalOwnerName = $('#technical_owner_name').val().trim();
        const technicalManagerName = $('#technical_manager_name').val().trim();
        
        if (!businessOwnerName) {
            e.preventDefault();
            alert('Please enter a business owner.');
            $('#business_owner_name').focus();
            return false;
        }
        
        if (!businessOwner) {
            e.preventDefault();
            alert('Please select a valid business owner from the suggestions.');
            $('#business_owner_name').focus();
            return false;
        }
        
        if (!technicalOwnerName) {
            e.preventDefault();
            alert('Please enter a technical owner.');
            $('#technical_owner_name').focus();
            return false;
        }
        
        if (!technicalOwner) {
            e.preventDefault();
            alert('Please select a valid technical owner from the suggestions.');
            $('#technical_owner_name').focus();
            return false;
        }
        
        if (!technicalManagerName) {
            e.preventDefault();
            alert('Please enter a technical manager.');
            $('#technical_manager_name').focus();
            return false;
        }
        
        if (!technicalManager) {
            e.preventDefault();
            alert('Please select a valid technical manager from the suggestions.');
            $('#technical_manager_name').focus();
            return false;
        }
    });
});
</script>
{% endblock %}
